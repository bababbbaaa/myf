<?php


namespace admin\controllers;


use admin\models\ActionLogger;
use admin\models\CookieValidator;
use common\models\UserModel;
use Symfony\Component\Finder\Exception\AccessDeniedException;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;

class AccessController extends Controller
{

    const COOKIE_ACCESS_NAME = "M54kA2du60";
    const COOKIE_VALIDATION_OPEN = false;

    protected $post_data;

    protected static $restricted_to_log = [
        'users' => ['*'],
        'roles' => ['*'],
        'assignments' => ['*'],
        'legacy' => ['*'],
        'rules' => ['*'],
    ];

    protected static function check__restrictions($controller, $action) {
        if (isset(static::$restricted_to_log[$controller])) {
            $rules = static::$restricted_to_log[$controller];
            return !in_array('*', $rules) && !in_array($action, $rules);
        }
        return true;
    }

    public function beforeAction($action)
    {
        if (empty($_SESSION['validation_passed']) || $_SESSION['validation_passed'] === false) {
            if (!empty($_COOKIE[self::COOKIE_ACCESS_NAME])) {
                $hash = $_COOKIE[self::COOKIE_ACCESS_NAME];
                $cookie = CookieValidator::findOne(1);
                if ($hash === $cookie->hash)
                    $_SESSION['validation_passed'] = true;
                else {
                    if ($hash === md5($cookie->date_prev)) {
                        $time = time() + 3600 * 24 * 365 * 10;
                        $cookie = setcookie(self::COOKIE_ACCESS_NAME, md5($cookie->date_current), $time, '/', 'admin.myforce.ru');
                        $_SESSION['validation_passed'] = $cookie;
                    } else {
                        setcookie(self::COOKIE_ACCESS_NAME, '1', time() - 10, '/', 'admin.myforce.ru');
                        $_SESSION['validation_passed'] = false;
                    }
                }
            } else $_SESSION['validation_passed'] = false;
        }
        if (strpos($_SERVER['REMOTE_ADDR'], '172.18.0') !== false) //172.18.0.1
            $_SESSION['validation_passed'] = true;
        if (!$_SESSION['validation_passed'] && !in_array($action->id, ['set-access', 'login'])) {
            $exception = new ForbiddenHttpException();
            die($this->render('/site/error', ['exception' => $exception]));
        }
        if (\Yii::$app->request->isPost) {
            $this->post_data = $_POST;
            $controller = \Yii::$app->controller;
            $user = \Yii::$app->getUser();
            if (!$user->isGuest && static::check__restrictions($controller->id, $action->id)) {
                if (isset($this->post_data['_csrf-admin']))
                unset($this->post_data['_csrf-admin']);
                try {
                    $log = new ActionLogger();
                    $log->user = (integer)$user->getId();
                    $log->action = $action->id;
                    $log->controller = $controller->id;
                    $log->params = json_encode(array_merge(['$_POST' => $this->post_data], ['$_GET' => $_GET]), JSON_UNESCAPED_UNICODE);
                    $log->save();
                } catch (\Exception $e) {
                    //file_put_contents('xlsx/exception.log', "ACTION_LOGGER: " . json_encode($e, JSON_UNESCAPED_UNICODE) . " - " . date("d.m.Y H:i:s") . PHP_EOL, FILE_APPEND);
                }
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
            'access' => [
                'class' => AccessControl::className(),
                'except' => ['delete'],
                'rules' => [
                    [
                        'actions' => ['login', 'error'],
                        'allow' => true,
                    ],
                    [
                        'actions' => ['logout', 'set-access'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['admin'],
                        'controllers' => ['*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['rbac'],
                        'controllers' => ['rbac/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['lead-force'],
                        'controllers' => ['lead-force/*'],
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['leadForceCms'],
                        'controllers' => ['lead-force/main', 'lead-force/offer-type', 'lead-force/lead-templates',],
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['partnerManager'],
                        'controllers' => ['lead-force/clients', 'lead-force/main'],
                        'actions' => ['index', 'view']
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['ropView'],
                        'controllers' => ['lead-force/clients', 'lead-force/main', 'lead-force/orders', 'lead-force/leads'],
                        'actions' => ['index', 'view', 'archive']
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['seller'],
                        'controllers' => ['lead-force/main'],
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['exporter'],
                        'controllers' => ['lead-force/leads'],
                        'actions' => ['ltv', 'ltv-save', 'ltv-add-form']
                        /*'matchCallback' => function ($rule, $action) {
                            if (\Yii::$app->controller->action->id === 'delete') {
                                $_SESSION['test'] = 123;
                                return \Yii::$app->getUser()->can('permissionToDelete');
                            } else
                                return true;
                        }*/
                    ],
                    [
                        'allow' => true,
                        'roles' => ['cms'],
                        'controllers' => ['cms/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['apiAccess'],
                        'controllers' => ['api-docs/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['settingsAccess'],
                        'controllers' => ['settings/*'],
                        'actions' => ['index', 'validation-open', 'validation-change']
                    ],
                    [
                        'allow' => true,
                        'roles' => ['userViewAccess'],
                        'controllers' => ['users'],
                        'actions' => ['view', 'index']
                    ],
                    [
                        'allow' => true,
                        'roles' => ['daemonCRUD'],
                        'controllers' => ['settings/*'],
                        'actions' => ['view', 'update']
                    ],
                    [
                        'allow' => true,
                        'roles' => ['skill-force'],
                        'controllers' => ['skill-force/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['dev-force'],
                        'controllers' => ['dev-force/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['logs'],
                        'controllers' => ['logs/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['supportAccess'],
                        'controllers' => ['support/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['contactCenter'],
                        'controllers' => ['contact-center/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['ccOperations'],
                        'controllers' => ['contact-center/main',],
                        'matchCallback' => function ($rule, $action) {
                            $user = UserModel::find()->where(['id' => \Yii::$app->getUser()->getId()])
                                ->select(['inner_name'])
                                ->asArray()
                                ->one();
                            if (empty($user['inner_name']))
                                return false;
                            else
                                return true;
                        }
                    ],
                    [
                        'allow' => true,
                        'roles' => ['ccOperations'],
                        'controllers' => ['lead-force/main',],
                        'actions' => ['get-regions-ajax']
                    ],
                    [
                        'allow' => true,
                        'roles' => ['mainPageModeration'],
                        'controllers' => ['users'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['adminLogin'],
                        'controllers' => ['site'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['reports'],
                        'controllers' => ['reports/*'],
                    ],
                    [
                        'allow' => true,
                        'roles' => ['voice-leads'],
                        'controllers' => ['voice-leads/*'],
                    ],
                    /*[
                        'allow' => true,
                        'roles' => ['permissionToDelete'],
                        'actions' => ['delete'],
                    ],*/
                ],
            ],
            'access-delete' => [
                'class' => AccessControl::className(),
                'only' => ['delete'],
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['permissionToDelete'],
                        'actions' => ['delete'],
                    ]
                ],
            ]
        ];
    }

}