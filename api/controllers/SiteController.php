<?php
namespace api\controllers;

use api\models\ResendVerificationEmailForm;
use api\models\VerifyEmailForm;
use common\models\BavariaBotMessages;
use common\models\BavariaContacts;
use common\models\LbMessages;
use common\models\LbPeers;
use common\models\m3\M3TelegramBot;
use f1yback\Bitrix24\LazyBitrix;
use Yii;
use yii\base\InvalidArgumentException;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use api\models\PasswordResetRequestForm;
use api\models\ResetPasswordForm;
use api\models\SignupForm;
use api\models\ContactForm;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        return $this->render('index');
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionError()
    {
        $exception = Yii::$app->errorHandler->exception;
        if ($exception !== null) {
            return $this->render('error', ['exception' => $exception]);
        }
    }

    public function actionLawyerBot() {
        $json = file_get_contents('php://input');
        $data = json_decode($json, 1);
        if (!empty($data['message'])) {
            $msg = $data['message'];
            if (!empty($msg['from']) && !$msg['from']['is_bot']) {
                $user = $msg['from'];
                $peer = LbPeers::findOne(['uid' => $user['id']]);
                if (empty($peer)) {
                    $peer = new LbPeers();
                    $peer->peer_stage = 'start';
                    $peer->uid = $user['id'];
                    $peer->save();
                }
                $message = new LbMessages();
                $message->username = $user['username'];
                $message->uid = $user['id'];
                $message->message = $msg['text'];
                $message->task = $peer->peer_stage;
                $message->save();
            }
        }
    }

    public function actionBavariaBot() {
        $json = file_get_contents('php://input');
        file_put_contents('bavaria.log', $json . PHP_EOL, FILE_APPEND);
        $data = json_decode($json, 1);
        if (!empty($data['message'])) {
            $ms = $data['message'];
            if (!empty($ms['contact'])) {
                $uid = $ms['contact']['user_id'];
                $bavaria = BavariaContacts::findOne(['tg_user' => $uid]);
                if (!empty($bavaria)) {
                    if ($bavaria->phone !== $ms['contact']['phone_number']) {
                        $bavaria->phone = $ms['contact']['phone_number'];
                        $bavaria->update();
                    }
                } else {
                    $bavaria = new BavariaContacts();
                    $bavaria->tg_user = (string)$uid;
                    $bavaria->phone = (string)$ms['contact']['phone_number'];
                    $bavaria->save();
                }
            }
            $bot = new M3TelegramBot($ms);
            $bot->fillProperties();
        }
    }

    public function actionGscript()
    {
        $data = file_get_contents("php://input");
        $ar = json_decode($data, 1);
        $lead = $ar[0][0];
        $color = $ar[1];
        $ch = curl_init();
        $btData = [
            'fields' => [
                'UF_CRM_1673938651909' => $lead[1],
                'TITLE' => $lead[1],
                'UF_CRM_1673938482885' => $lead[0],
                'UF_CRM_1673861951279' => $lead[2],
                'UF_CRM_1673938734013' => $lead[3],
                'UF_CRM_1673861915976' => $lead[4],
                'UF_CRM_1673862801895' => $color === '#b4a7d6' ? 7576 : 7578,
                'ASSIGNED_BY_ID' => 50,
                'CATEGORY_ID' => 120
            ]
        ];
        curl_setopt_array($ch, [
            CURLOPT_URL => "https://femidaforce.bitrix24.ru/rest/22/8hgvhbcr19elk576/crm.deal.add",
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => http_build_query($btData),
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_HEADER => false
        ]);
        $response = curl_exec($ch);
        file_put_contents("test-gs.log", $response . PHP_EOL, FILE_APPEND);
        curl_close($ch);
    }

}
