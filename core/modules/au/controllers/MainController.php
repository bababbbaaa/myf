<?php

namespace app\modules\au\controllers;

use common\models\AuClient;
use core\controllers\AuAccessController;
use yii\helpers\Html;
use yii\web\Controller;
use yii\web\Response;
Use yii\helpers\Url;
Use Yii;

class MainController extends AuAccessController
{

    public function beforeAction($action)
    {
        Yii::$app->session->set('voronka', 72);
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        if (!empty($_GET['filter'])) {
            $f = $_GET['filter'];
            $filter = ['AND'];
            $eqs = [
                'id',
                'RaspCheck',
                'Pmreg',
                'SumGlobal',
                'PMGlobal',
                'KMGlobal',
                'DutGlobal',
                'CosGlobal',
                'SaleGlobal',
                'RemGlobal',
                'RasGlobal',
                'pubSUM',
                'global_status',
            ];
            $dates = ['RaspDate', 'BflDate', 'FinDate', 'RealDate', 'pubDATE', 'depDATE'];
            $like = ['FIO', 'Nkad', 'part', 'bankall', 'recface', 'au_name_text'];
            foreach ($_GET['filter'] as $key => $item) {
                if (!empty($item)) {
                    if (in_array($key, $eqs))
                        $filter[] = [$key => $item];
                    elseif(in_array($key, $dates)) {
                        $start = date('Y-m-d 00:00:00', strtotime($item));
                        $end = date('Y-m-d 23:59:59', strtotime($item));
                        $buf = ['AND', ['>=', $key, $start], ['<=', $key, $end]];
                        $filter[] = $buf;
                    } elseif(in_array($key, $like))
                        $filter[] = ['like', $key, "%{$item}%", false];
                }
            }
            $au = AuClient::find()->where(['user_id' => Yii::$app->getUser()->getId()])
                ->andWhere($filter)->asArray()->all();
        } else
            $au = AuClient::find()->where(['user_id' => Yii::$app->getUser()->getId()])->asArray()->all();
        return $this->render('index', ['au' => $au]);
    }

    public function actionFirst() {
        $date = date("Y-m");
        $filters = [];
        if (!empty($_GET['filter'])){
            $arrs0 = [
                "SumW",
                "SumPM",
                "SobKM",
                "month_status",
                "Kom",
                "DutMe",
            ];
            $filters = ['AND'];
            $f = $_GET['filter'];
            if(!empty($f['realDate']))
                $date = date("Y-m", strtotime($f['realDate']));
            if(!empty($f['id'])) {
                $filters[] = ['id' => $f['id']];
            }
            if(!empty($f['FIO'])) {
                $filters[] = ['like', 'FIO', "%{$f['FIO']}%", false];
            }
            if(!empty($f['recface'])) {
                $filters[] = ['like', 'recface', "%{$f['recface']}%", false];
            }
            if(!empty($f['part'])) {
                $filters[] = ['like', 'part', "%{$f['part']}%", false];
            }
            foreach ($f as $key => $item) {
                if (in_array($key, $arrs0) && !empty($item)) {
                    $filters[] = ['like', 'month', '%"'.$key.'":"'.$item.'%', false];
                }
            }
        }
        $au = AuClient::find()
            ->where(['user_id' => Yii::$app->getUser()->getId()])
            ->andWhere(['like', 'month', '%"realMonth":"'. $date .'"%', false])
            ->andWhere($filters)
            ->asArray()->all();
        return $this->render('first', ['au' => $au, 'f' => $filters]);
    }

    public function actionAddNew() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST['add'])) {
            $au = new AuClient();
            $au->user_id = Yii::$app->getUser()->getId();
            if ($au->save())
                return ['status' => 'success'];
            else
                return ['status' => 'error', 'message' => 'Ошибка сохранения'];
        } else
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
    }

    public function actionSaveClient() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['id']) || !isset($_POST['val']) || !isset($_POST['name']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $dates = ['RaspDate', 'BflDate', 'FinDate', 'RealDate', 'ZPDateD', 'PNDateD', 'SCDateD', 'PRDateD', 'pubDATE', 'depDATE'];
        if (in_array($_POST['name'], $dates))
            $_POST['val'] = date("Y-m-d H:i:s", strtotime($_POST['val']));
        $input['AuClient'][$_POST['name']] = $_POST['val'];
        $au->load($input);
        $au->validate();
        $monthsGenKeys = ['BflDate', 'FinDate', 'RealDate'];
        if($_POST['name'] !== 'PMall')
            $au->PMall = $au->PMzp + $au->PMch + $au->PMsc + $au->PMpr;
        if($_POST['name'] !== 'DHALL')
            $au->DHALL = $au->ZPSUM + $au->PNSUM + $au->SCSUM + $au->PRSUM;
        if (in_array($_POST['name'], $monthsGenKeys)) {
            if (!empty($au->BflDate)) {
                $startM = (int)date("n", strtotime($au->BflDate));
                $startY = (int)date("Y", strtotime($au->BflDate));
                if (!empty($au->RealDate)) {
                    $endM = (int)date("n", strtotime($au->RealDate));
                    $endY = (int)date("Y", strtotime($au->RealDate));
                }
                elseif(!empty($au->FinDate)) {
                    $endM = (int)date("n", strtotime($au->FinDate));
                    $endY = (int)date("Y", strtotime($au->FinDate));
                }
                if (!empty($endM) && !empty($endY)) {
                    $multiplier = $endY - $startY;
                    $monthCount = $endM - $startM + $multiplier * 12 + 1;
                    $monthsArr = [];
                    $starter = date("Y-m", strtotime($au->BflDate));
                    if(!empty($au->RealDate))
                        $ender = date("Y-m", strtotime($au->RealDate));
                    elseif(!empty($au->FinDate))
                        $ender = date("Y-m", strtotime($au->FinDate));
                    if (!empty($ender)) {
                        $break = false;
                        while(true) {
                            if ($starter === $ender)
                                $break = true;
                            $monthsArr[] = $starter;
                            if($break)
                                break;
                            $starter = date("Y-m", strtotime("+1 month", strtotime($starter)));
                        }
                    }
                    if (empty($au->month)) {
                        $buf = [];
                        for ($i = 0; $i < $monthCount; $i++) {
                            $buf[] = [
                                'DayW' => null,
                                'SumW' => 0,
                                'DayPM' => null,
                                'SumPM' => 0,
                                'DutPM' => 0,
                                'DutMe' => 0,
                                'CosAY' => 0,
                                'SaleKM' => 0,
                                'RemAY' => 0,
                                'SobKM' => 0,
                                'RasPM' => 0,
                                'Kom' => null,
                                'month_status' => null,
                                'realMonth' => isset($monthsArr[$i]) ? $monthsArr[$i] : null
                            ];
                        }
                        $au->month = json_encode($buf, JSON_UNESCAPED_UNICODE);
                    } else {
                        $json = json_decode($au->month, 1);
                        $jsonCount = count($json);
                        if ($jsonCount > $monthCount) {
                            $buf = [];
                            for ($i = 0; $i < $monthCount; $i++) {
                                $buf[] = [
                                    'DayW' => $json[$i]['DayW'],
                                    'SumW' => $json[$i]['SumW'],
                                    'DayPM' => $json[$i]['DayPM'],
                                    'SumPM' => $json[$i]['SumPM'],
                                    'DutPM' => $json[$i]['DutPM'],
                                    'DutMe' => $json[$i]['DutMe'],
                                    'CosAY' => $json[$i]['CosAY'],
                                    'SaleKM' => $json[$i]['SaleKM'],
                                    'RemAY' => $json[$i]['RemAY'],
                                    'SobKM' => $json[$i]['SobKM'],
                                    'RasPM' => $json[$i]['RasPM'],
                                    'Kom' => $json[$i]['Kom'],
                                    'month_status' => $json[$i]['month_status'],
                                    'realMonth' => isset($monthsArr[$i]) ? $monthsArr[$i] : null
                                ];
                            }
                            $au->month = json_encode($buf, JSON_UNESCAPED_UNICODE);
                        } elseif ($jsonCount < $monthCount) {
                            $buf = [];
                            for ($i = 0; $i < $monthCount; $i++) {
                                if (isset($json[$i])) {
                                    $buf[] = [
                                        'DayW' => $json[$i]['DayW'],
                                        'SumW' => $json[$i]['SumW'],
                                        'DayPM' => $json[$i]['DayPM'],
                                        'SumPM' => $json[$i]['SumPM'],
                                        'DutPM' => $json[$i]['DutPM'],
                                        'DutMe' => $json[$i]['DutMe'],
                                        'CosAY' => $json[$i]['CosAY'],
                                        'SaleKM' => $json[$i]['SaleKM'],
                                        'RemAY' => $json[$i]['RemAY'],
                                        'SobKM' => $json[$i]['SobKM'],
                                        'RasPM' => $json[$i]['RasPM'],
                                        'Kom' => $json[$i]['Kom'],
                                        'month_status' => $json[$i]['month_status'],
                                        'realMonth' => isset($monthsArr[$i]) ? $monthsArr[$i] : null
                                    ];
                                } else {
                                    $buf[] = [
                                        'DayW' => null,
                                        'SumW' => 0,
                                        'DayPM' => null,
                                        'SumPM' => 0,
                                        'DutPM' => 0,
                                        'DutMe' => 0,
                                        'CosAY' => 0,
                                        'SaleKM' => 0,
                                        'RemAY' => 0,
                                        'SobKM' => 0,
                                        'RasPM' => 0,
                                        'Kom' => null,
                                        'month_status' => null,
                                        'realMonth' => isset($monthsArr[$i]) ? $monthsArr[$i] : null
                                    ];
                                }
                            }
                            $au->month = json_encode($buf, JSON_UNESCAPED_UNICODE);
                        }
                    }
                }
            }
        }
        return $au->update() !== false ? ['status' => 'success'] : ['status' => 'error', 'message' => 'Ошибка обновления клиента'];
    }

    public function actionSaveClientJson() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['month']) || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $month = $_POST['month'];
        if (!empty($month) && is_array($month)) {
            $oldData = json_decode($au->month, 1);
            foreach ($month as $key => $item) {
                foreach ($item as $k => $v) {
                    if ($k === 'DayW' || $k === 'DayPM')
                        $oldData[$key][$k] = date("Y-m-d H:i:s", strtotime($v));
                    else
                        $oldData[$key][$k] = $v;
                }
            }
            switch ($k) {
                case "SumW":
                    $au->SumGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->SumGlobal += $item['SumW'];
                    }
                    $au->KMGlobal = $au->SumGlobal - $au->PMGlobal;
                    break;
                case "SumPM":
                    $au->PMGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->PMGlobal += $item['SumPM'];
                    }
                    $au->KMGlobal = $au->SumGlobal - $au->PMGlobal;
                    break;
                case "DutPM":
                case "DutMe":
                    $au->DutGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->DutGlobal += ($item['DutPM'] - $item['DutMe']);
                    }
                    break;
                case "CosAY":
                    $au->CosGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->CosGlobal += $item['CosAY'];
                    }
                    break;
                case "SaleKM":
                    $au->SaleGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->SaleGlobal += $item['SaleKM'];
                    }
                    break;
                case "RemAY":
                    $au->RemGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->RemGlobal += $item['RemAY'];
                    }
                    break;
                case "RasPM":
                    $au->RasGlobal = 0;
                    foreach ($oldData as $item) {
                        $au->RasGlobal += $item['RasPM'];
                    }
                    break;
            }
            $au->month = json_encode($oldData, 1);
            $au->update();
            return ['status' => 'success'];
        } else
            return ['status' => 'error', 'message' => 'Ошибочный запрос (массив)'];
    }

    public function actionSaveClientJsonT() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['month']) || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $month = $_POST['month'];
        if (!empty($month) && is_array($month)) {
            $oldData = json_decode($au->month, 1);
            foreach ($month as $key => $item) {
                foreach ($item as $k => $v) {
                    if ($k === 'DayW' || $k === 'DayPM')
                        $oldData[$key][$k] = date("Y-m-d H:i:s", strtotime($v));
                    else
                        $oldData[$key][$k] = $v;
                }
            }
            $au->month = json_encode($oldData, 1);
            $au->update();
            return ['status' => 'success'];
        } else
            return ['status' => 'error', 'message' => 'Ошибочный запрос (массив)'];
    }

    public function actionSaveClientPartner() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['part']) || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $part = $_POST['part'];
        $au->part = json_encode($part, JSON_UNESCAPED_UNICODE);
        $au->update();
        return ['status' => 'success'];
    }

    public function actionSaveClientPm() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['recface']) || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $part = $_POST['recface'];
        $au->recface = json_encode($part, JSON_UNESCAPED_UNICODE);
        $au->update();
        return ['status' => 'success'];
    }

    public function actionSaveClientBank() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['bankall']) || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $part = $_POST['bankall'];
        $au->bankall = json_encode($part, JSON_UNESCAPED_UNICODE);
        $au->update();
        return ['status' => 'success'];
    }

    public function actionClearBank() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!Yii::$app->request->isPost || !isset($_POST['id']))
            return ['status' => 'error', 'message' => 'Ошибочный запрос'];
        $id = $_POST['id'];
        $uid = Yii::$app->getUser()->getId();
        $au = AuClient::findOne(['user_id' => $uid, 'id' => $id]);
        if (empty($au))
            return ['status' => 'error', 'message' => 'Клиент не найден'];
        $au->bankall = null;
        $au->update();
        return ['status' => 'success'];
    }

    public function actionGetBankForm() {
        return $this->renderPartial('get-bank-form', ['c' => $_POST['c'] ?? 0, 'json' => $_POST['json'] ?? null]);
    }
    public function actionGetRs() {
        return $this->renderPartial('get-rs', ['c' => $_POST['c'] ?? 0, 'bank' => $_POST['bank'] ?? 0, 'json' => $_POST['json'] ?? null]);
    }

    public function actionHideCol() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST['col']))
            $_SESSION['hide'][$_POST['col']] = 1;
        return ['status' => 'success'];
    }
    public function actionRestoreCol() {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (!empty($_POST['k']))
            unset($_SESSION['hide'][$_POST['k']]);
        return ['status' => 'success'];
    }
}
