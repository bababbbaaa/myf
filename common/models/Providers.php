<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "providers".
 *
 * @property int $id
 * @property string $f
 * @property string $i
 * @property string|null $o
 * @property string|null $email
 * @property int $user_id
 * @property string|null $commentary
 * @property string $date
 * @property string|null $requisites
 * @property string|null $other_info
 * @property string|null $company_info
 * @property string|null $referal
 * @property string $provider_token
 */
class Providers extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'providers';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['f', 'i', 'user_id', 'provider_token'], 'required'],
            [['user_id'], 'integer'],
            [['commentary', 'requisites', 'other_info', 'company_info'], 'string'],
            [['date'], 'safe'],
            [['f', 'i', 'o', 'email', 'provider_token', 'referal'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'f' => 'F',
            'i' => 'I',
            'o' => 'O',
            'email' => 'Email',
            'user_id' => 'User ID',
            'commentary' => 'Commentary',
            'date' => 'Date',
            'requisites' => 'Requisites',
            'other_info' => 'Other Info',
            'provider_token' => 'Provider Token',
            'referal' => 'Referal',
        ];
    }

    public function generate__uuid() {
        $voc = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];
        $extra = ['Z', 'X', 'Y', 'W'];
        $time = microtime();
        $time = str_replace('0.', '', $time);
        $var = explode(' ', $time);
        $part1 = $var[1];
        $part2 = $var[0];
        $long = $part1.$part2;
        $long = str_split($long);
        $new = '';
        foreach ($long as $key => $item) {
            if ($key % 2 !== 0 || $key === 0) {
                $new .= $item;
            } else {
                $new .= $voc[mt_rand(0, count($voc) - 1)] . "-" . $item;
            }
        }
        $new = str_replace('00', $extra[mt_rand(0, 3)] . $this->user_id . $extra[mt_rand(0, 3)], $new);
        return $new;
    }

    public function generate__referal() {
        do {
            $hex = bin2hex(random_bytes(20));
            $provider = Providers::findOne(['referal' => $hex]);
            if (empty($provider)) {
                $this->referal = $hex;
                break;
            }
        } while (true);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->generate__referal();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

}
