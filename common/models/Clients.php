<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "clients".
 *
 * @property int $id ID
 * @property int $archive Архивный клиент
 * @property string $f Фамилия
 * @property string $i Имя
 * @property string|null $o Отчество
 * @property string|null $email Почта
 * @property int|null $user_id Пользователь
 * @property int|null $attached_seller Прикрепленный продаван
 * @property string|null $commentary Комментарий администрации
 * @property string|null $company_info Информация о компании
 * @property string|null $requisites Реквизиты
 * @property string $date Дата создания
 * @property string|null $custom_params Специальные параметры
 *
 * @property LeadsSentReport[] $leadsSentReports
 * @property Orders[] $orders
 * @property Orders[] $archiveOrders
 */
class Clients extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'clients';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['f', 'i'], 'required'],
            [['user_id', 'archive', 'attached_seller'], 'integer'],
            [['commentary', 'company_info', 'requisites', 'custom_params'], 'string'],
            [['date'], 'safe'],
            [['f', 'i', 'o', 'email'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'f' => 'Фамилия',
            'i' => 'Имя',
            'o' => 'Отчество',
            'email' => 'Почта',
            'user_id' => 'Пользователь',
            'commentary' => 'Комментарий администрации',
            'company_info' => 'Информация о компании',
            'requisites' => 'Реквизиты',
            'date' => 'Дата создания',
            'custom_params' => 'Специальные параметры',
            'archive' => 'Архивный клиент',
            'attached_seller' => 'Прикрепленный менеджер отдела продаж',
        ];
    }

    /**
     * Gets query for [[LeadsSentReports]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getLeadsSentReports()
    {
        return $this->hasMany(LeadsSentReport::className(), ['client_id' => 'id']);
    }

    /**
     * Gets query for [[Orders]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(Orders::className(), ['client' => 'id'])->orderBy('orders.id desc');
    }

    public function getArchiveOrders() {
        return $this->hasMany(Orders::className(), ['client' => 'id'])->where(['orders.archive' => 1])->orderBy('orders.id desc');
    }

    public function afterSave($insert, $changedAttributes)
    {
        if (!empty($this->company_info) && !empty($this->requisites)) {
            $jq = JobsQueue::find()
                ->where(['user_id' => $this->user_id, 'method' => 'execute__mailer'])
                ->andWhere(['like', 'params', "%2_profile%", false])
                ->andWhere(['>=', 'date_start', date("Y-m-d H:i:s")])
                ->all();
            if (!empty($jq)) {
                foreach ($jq as $item)
                    $item->delete();
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

}
