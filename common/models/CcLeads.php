<?php

namespace common\models;

use common\models\helpers\PhoneRegionHelper;
use Yii;

/**
 * This is the model class for table "cc_leads".
 *
 * @property int $id ID
 * @property string $source Источник
 * @property string|null $utm_source utm_source
 * @property string|null $utm_campaign utm_campaign
 * @property string $date_income Дата поступления
 * @property string|null $date_outcome Дата отправки
 * @property string|null $date_last_tmp Дата отправки
 * @property string|null $status_temp Временный статус
 * @property string|null $status Статус
 * @property string|null $name Имя
 * @property string $phone Телефон
 * @property string|null $region Регион
 * @property string|null $city Город
 * @property string $category Категория
 * @property string|null $params Параметры
 * @property string|null $special_source Специальный источник
 * @property int $assigned_to Привязан к пользователю
 * @property int $sms_sent СМС отправлено
 * @property int $sms_got Лид прошел анкету
 * @property string|null $info Прочая информация
 * @property LeadsActions[] $opens
 */
class CcLeads extends \yii\db\ActiveRecord
{

    public $dateStartFilter;
    public $dateStopFilter;
    public $dateStartFilterOpened;
    public $dateStopFilterOpened;
    public $dateType;
    public $showAwait;

    public static $tmpStatuses = [
        'недозвон 1',
        'недозвон 2',
        'недозвон 3',
        'недозвон 4',
    ];

    public static $endStatus = [
        'не целевой',
        'недозвон 5',
        'ждет звонка',
        'брак (номер)'
    ];

    public static $succeedStatuses = [
        'ждет звонка',
    ];

    public static $wasteStatuses = [
        'не целевой',
        'недозвон 5',
        'брак (номер)'
    ];

    public function randomAssigned() {
        $ruled = AuthAssignment::find()->where(['item_name' => 'cc'])->asArray()->all();
        $arr = [];
        foreach ($ruled as $item)
            $arr[] = $item['user_id'];
        $users = UserModel::find()
            ->where([
                'AND',
                ['in', 'id', $arr],
                ['cc_status' => UserModel::STATUS_WORKING],
            ])
            ->andWhere(new yii\db\Expression('cc_daily_max > cc_daily_get'))
            ->asArray()
            ->select(['id', 'cc_daily_max', 'cc_daily_get', 'cc_status'])
            ->all();
        $count = count($users);
        if ($count > 0) {
            $rsp = $users[mt_rand(0, $count - 1)]['id'];
            $user = UserModel::findOne($rsp);
            $user->cc_daily_get++;
            $user->update();
        } else
            $rsp = null;
        return $rsp;
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $dbReg = PhoneRegionHelper::getValidRegion($this->phone);
            if (!empty($dbReg)) {
                $parseMSK = explode('+', $dbReg->timezone);
                $newMSK = (int)$parseMSK[1] - 3;
                if ($newMSK >= 0)
                    $textMSK = "+{$newMSK}";
                else
                    $textMSK = "-{$newMSK}";
                $this->info = json_encode(['region' => $dbReg->name_with_type, 'msk' => "{$textMSK}"], JSON_UNESCAPED_UNICODE);
            }
            if (empty($this->assigned_to))
                $this->assigned_to = $this->randomAssigned();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'cc_leads';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['source', 'phone', 'category'], 'required'],
            [['date_income', 'date_outcome', 'date_last_tmp'], 'safe'],
            [['params', 'info', 'dateStartFilter', 'dateStopFilter'], 'string'],
            [['assigned_to', 'dateType', 'showAwait', 'sms_sent', 'sms_got'], 'integer'],
            [['source', 'utm_source', 'utm_campaign', 'status_temp', 'status', 'name', 'special_source', 'phone', 'region', 'city', 'category'], 'string', 'max' => 255],
        ];
    }

    public function sendSms($phone, $email) {
        $message = "Ссылка на аудит: www.business-bfl.ru";
        $client = new \SoapClient('https://smsc.ru/sys/soap.php?wsdl');
        $ret = $client->send_sms(array('login'=>'FemidaForce', 'psw'=>'1q2w3e2w1q', 'phones' => $phone, 'mes' => $message, 'sender'=>'MYFORCE'));
        if (!empty($email)) {
            $html = "Ссылка на аудит: <a href='https://business-bfl.ru'>www.business-bfl.ru</a>";
            $eml = Yii::$app->mailer->compose()
                ->setFrom('info@myforce.ru')
                ->setTo($email)
                ->setSubject("Аудит бизнеса от MYFORCE")
                ->setHtmlBody($html)
                ->send();
        }
        return $ret;
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'source' => 'Источник',
            'special_source' => 'Специальный источник',
            'utm_source' => 'utm_source',
            'utm_campaign' => 'utm_campaign',
            'date_income' => 'Дата поступления',
            'date_outcome' => 'Дата отправки',
            'status_temp' => 'Временный статус',
            'status' => 'Статус',
            'name' => 'Имя',
            'phone' => 'Телефон',
            'region' => 'Регион',
            'city' => 'Город',
            'category' => 'Категория',
            'params' => 'Параметры',
            'assigned_to' => 'Оператор',
            'info' => 'Прочая информация',
            'sms_sent' => 'СМС отправлено',
            'sms_got' => 'Анкета пройдена',
            'date_last_tmp' => 'Дата последнего пром. статуса',
            'sum' => 'Сумма долга',
            'opens' => 'Открытия',
        ];
    }

    public static function xlsxAttributeLabels()
    {
        return [
            'id' => 'ID', #0
            'source' => 'Источник', #1
            'utm_source' => 'utm_source', #2
            'date_income' => 'Дата поступления', #3
            'date_outcome' => 'Дата отправки', #4
            'status_temp' => 'Временный статус', #5
            'status' => 'Статус', #6
            'name' => 'Имя', #7
            'phone' => 'Телефон', #8
            'region' => 'Регион', #9
            'city' => 'Город', #10
            'category' => 'Категория', #11
            'params' => 'Параметры', #12
            'assigned_to' => 'Оператор', #13
            'info' => 'Прочая информация', #14
            'special_source' => 'Специальный источник', #15
            'sms_sent' => 'СМС отправлено', #16
            'sms_got' => 'Анкета пройдена', #17
            'date_last_tmp' => 'Дата последнего пром. статуса', #18
            'utm_campaign' => 'utm_campaign', #19
        ];
    }

    public function getOpens() {
        return $this->hasMany(LeadsActions::class, ['lead_id' => 'id'])->where(['leads_actions.lead_type' => 'cc']);
    }
}
